autointent.modules.scoring
==========================

.. py:module:: autointent.modules.scoring


Classes
-------

.. autoapisummary::

   autointent.modules.scoring.ScoringModule
   autointent.modules.scoring.DescriptionScorer
   autointent.modules.scoring.DNNCScorer
   autointent.modules.scoring.KNNScorer
   autointent.modules.scoring.LinearScorer
   autointent.modules.scoring.MLKnnScorer


Package Contents
----------------

.. py:class:: ScoringModule

   Bases: :py:obj:`autointent.modules.Module`, :py:obj:`abc.ABC`


   Abstract base class for scoring modules.

   Scoring modules predict scores for utterances and evaluate their performance
   using a scoring metric.


   .. py:method:: score(context, metric_fn)

      Evaluate the scorer on a test set and compute the specified metric.

      :param context: Context containing test set and other data.
      :param metric_fn: Function to compute the scoring metric.
      :return: Computed metric value for the test set.



   .. py:method:: get_assets()

      Retrieve assets generated during scoring.

      :return: ScorerArtifact containing test scores and out-of-scope (OOS) scores.



   .. py:method:: predict(utterances)
      :abstractmethod:


      Predict scores for a list of utterances.

      :param utterances: List of utterances to score.
      :return: Array of predicted scores.



   .. py:method:: predict_topk(utterances, k = 3)

      Predict the top-k most probable classes for each utterance.

      :param utterances: List of utterances to score.
      :param k: Number of top classes to return, defaults to 3.
      :return: Array of shape (n_samples, k) with indices of the top-k classes.



.. py:class:: DescriptionScorer(embedder_name, temperature = 1.0, device = 'cpu', batch_size = 32, max_length = None)

   Bases: :py:obj:`autointent.modules.scoring.ScoringModule`


   Scoring module that scores utterances based on similarity to intent descriptions.


   .. py:attribute:: weights_file_name
      :type:  str
      :value: 'description_vectors.npy'



   .. py:attribute:: embedder
      :type:  autointent.Embedder


   .. py:attribute:: precomputed_embeddings
      :type:  bool
      :value: False



   .. py:attribute:: embedding_model_subdir
      :type:  str
      :value: 'embedding_model'



   .. py:attribute:: db_dir
      :type:  str


   .. py:attribute:: name
      :value: 'description'



   .. py:attribute:: temperature


   .. py:attribute:: device


   .. py:attribute:: embedder_name


   .. py:attribute:: batch_size


   .. py:attribute:: max_length


   .. py:method:: from_context(context, temperature, embedder_name = None)
      :classmethod:


      Create a DescriptionScorer instance using a Context object.

      :param context: Context containing configurations and utilities.
      :param temperature: Temperature parameter for scaling logits.
      :param embedder_name: Name of the embedder model. If None, the best embedder is used.
      :return: Initialized DescriptionScorer instance.



   .. py:method:: get_embedder_name()

      Get the name of the embedder.

      :return: Embedder name.



   .. py:method:: fit(utterances, labels, descriptions)

      Fit the scorer by embedding utterances and descriptions.

      :param utterances: List of utterances to embed.
      :param labels: List of labels corresponding to the utterances.
      :param descriptions: List of intent descriptions.
      :raises ValueError: If descriptions contain None values or embeddings mismatch utterances.



   .. py:method:: predict(utterances)

      Predict scores for utterances based on similarity to intent descriptions.

      :param utterances: List of utterances to score.
      :return: Array of probabilities for each utterance.



   .. py:method:: clear_cache()

      Clear cached data in memory used by the embedder.



   .. py:method:: dump(path)

      Save the scorer's metadata, description vectors, and embedder state.

      :param path: Path to the directory where assets will be dumped.



   .. py:method:: load(path)

      Load the scorer's metadata, description vectors, and embedder state.

      :param path: Path to the directory containing the dumped assets.



.. py:class:: DNNCScorer(cross_encoder_name, embedder_name, k, db_dir = None, device = 'cpu', train_head = False, batch_size = 32, max_length = None)

   Bases: :py:obj:`autointent.modules.scoring.ScoringModule`


   Scoring module for intent classification using a discriminative nearest neighbor classification (DNNC).

   This module uses a CrossEncoder for scoring candidate intents and can optionally
   train a logistic regression head on top of cross-encoder features.

   .. code-block:: bibtex

       @misc{zhang2020discriminativenearestneighborfewshot,
         title={Discriminative Nearest Neighbor Few-Shot Intent Detection by Transferring Natural Language Inference},
         author={Jian-Guo Zhang and Kazuma Hashimoto and Wenhao Liu and Chien-Sheng Wu and Yao Wan and
         Philip S. Yu and Richard Socher and Caiming Xiong},
         year={2020},
         eprint={2010.13009},
         archivePrefix={arXiv},
         primaryClass={cs.CL},
         url={https://arxiv.org/abs/2010.13009},
       }



   .. py:attribute:: name
      :value: 'dnnc'



   .. py:attribute:: crossencoder_subdir
      :type:  str
      :value: 'crossencoder'



   .. py:attribute:: model
      :type:  sentence_transformers.CrossEncoder | autointent.modules.scoring._dnnc.head_training.CrossEncoderWithLogreg


   .. py:attribute:: prebuilt_index
      :type:  bool
      :value: False



   .. py:attribute:: cross_encoder_name


   .. py:attribute:: embedder_name


   .. py:attribute:: k


   .. py:attribute:: train_head


   .. py:attribute:: device


   .. py:attribute:: batch_size


   .. py:attribute:: max_length


   .. py:property:: db_dir
      :type: str


      Get the database directory for the vector index.

      :return: Path to the database directory.



   .. py:method:: from_context(context, cross_encoder_name, k, embedder_name = None, train_head = False)
      :classmethod:


      Create a DNNCScorer instance using a Context object.

      :param context: Context containing configurations and utilities.
      :param cross_encoder_name: Name of the cross-encoder model.
      :param k: Number of nearest neighbors to retrieve.
      :param embedder_name: Name of the embedder model, or None to use the best embedder.
      :param train_head: Whether to train a logistic regression head, defaults to False.
      :return: Initialized DNNCScorer instance.



   .. py:method:: fit(utterances, labels)

      Fit the scorer by training or loading the vector index and optionally training a logistic regression head.

      :param utterances: List of training utterances.
      :param labels: List of labels corresponding to the utterances.
      :raises ValueError: If the vector index mismatches the provided utterances.



   .. py:method:: predict(utterances)

      Predict class scores for the given utterances.

      :param utterances: List of utterances to score.
      :return: Array of predicted scores.



   .. py:method:: predict_with_metadata(utterances)

      Predict class scores along with metadata for the given utterances.

      :param utterances: List of utterances to score.
      :return: Tuple of scores and metadata containing neighbor details and scores.



   .. py:method:: clear_cache()

      Clear cached data in memory used by the vector index.



   .. py:method:: dump(path)

      Save the DNNCScorer's metadata, vector index, and model to disk.

      :param path: Path to the directory where assets will be dumped.



   .. py:method:: load(path)

      Load the DNNCScorer's metadata, vector index, and model from disk.

      :param path: Path to the directory containing the dumped assets.



.. py:class:: KNNScorer(embedder_name, k, weights, db_dir = None, device = 'cpu', batch_size = 32, max_length = None)

   Bases: :py:obj:`autointent.modules.scoring.ScoringModule`


   K-nearest neighbors (KNN) scorer for intent classification.

   This module uses a vector index to retrieve nearest neighbors for query utterances
   and applies a weighting strategy to compute class probabilities.

   :ivar weights: Weighting strategy used for scoring.
   :ivar _vector_index: VectorIndex instance for neighbor retrieval.
   :ivar name: Name of the scorer, defaults to "knn".
   :ivar prebuilt_index: Flag indicating if the vector index is prebuilt.


   .. py:attribute:: weights
      :type:  autointent.custom_types.WEIGHT_TYPES


   .. py:attribute:: name
      :value: 'knn'



   .. py:attribute:: prebuilt_index
      :type:  bool
      :value: False



   .. py:attribute:: embedder_name


   .. py:attribute:: k


   .. py:attribute:: device


   .. py:attribute:: batch_size


   .. py:attribute:: max_length


   .. py:property:: db_dir
      :type: str


      Get the database directory for the vector index.

      :return: Path to the database directory.



   .. py:method:: from_context(context, k, weights, embedder_name = None)
      :classmethod:


      Create a KNNScorer instance using a Context object.

      :param context: Context containing configurations and utilities.
      :param k: Number of closest neighbors to consider during inference.
      :param weights: Weighting strategy for scoring.
      :param embedder_name: Name of the embedder, or None to use the best embedder.
      :return: Initialized KNNScorer instance.



   .. py:method:: get_embedder_name()

      Get the name of the embedder.

      :return: Embedder name.



   .. py:method:: fit(utterances, labels)

      Fit the scorer by training or loading the vector index.

      :param utterances: List of training utterances.
      :param labels: List of labels corresponding to the utterances.
      :raises ValueError: If the vector index mismatches the provided utterances.



   .. py:method:: predict(utterances)

      Predict class probabilities for the given utterances.

      :param utterances: List of query utterances.
      :return: Array of predicted probabilities for each class.



   .. py:method:: predict_with_metadata(utterances)

      Predict class probabilities along with metadata for the given utterances.

      :param utterances: List of query utterances.
      :return: Tuple of predicted probabilities and metadata with neighbor information.



   .. py:method:: clear_cache()

      Clear cached data in memory used by the vector index.



   .. py:method:: dump(path)

      Save the KNNScorer's metadata and vector index to disk.

      :param path: Path to the directory where assets will be dumped.



   .. py:method:: load(path)

      Load the KNNScorer's metadata and vector index from disk.

      :param path: Path to the directory containing the dumped assets.



.. py:class:: LinearScorer(embedder_name, cv = 3, n_jobs = -1, device = 'cpu', seed = 0, batch_size = 32, max_length = None)

   Bases: :py:obj:`autointent.modules.scoring._base.ScoringModule`


   Scoring module for linear classification using logistic regression.

   This module uses embeddings generated from a transformer model to train a
   logistic regression classifier for intent classification.

   :ivar classifier_file_name: Filename for saving the classifier to disk.
   :ivar embedding_model_subdir: Directory for saving the embedding model.
   :ivar precomputed_embeddings: Flag indicating if embeddings are precomputed.
   :ivar db_dir: Path to the database directory.
   :ivar name: Name of the scorer, defaults to "linear".


   .. py:attribute:: classifier_file_name
      :type:  str
      :value: 'classifier.joblib'



   .. py:attribute:: embedding_model_subdir
      :type:  str
      :value: 'embedding_model'



   .. py:attribute:: precomputed_embeddings
      :type:  bool
      :value: False



   .. py:attribute:: db_dir
      :type:  str


   .. py:attribute:: name
      :value: 'linear'



   .. py:attribute:: cv


   .. py:attribute:: n_jobs


   .. py:attribute:: device


   .. py:attribute:: seed


   .. py:attribute:: embedder_name


   .. py:attribute:: batch_size


   .. py:attribute:: max_length


   .. py:method:: from_context(context, embedder_name = None)
      :classmethod:


      Create a LinearScorer instance using a Context object.

      :param context: Context containing configurations and utilities.
      :param embedder_name: Name of the embedder, or None to use the best embedder.
      :return: Initialized LinearScorer instance.



   .. py:method:: get_embedder_name()

      Get the name of the embedder.

      :return: Embedder name.



   .. py:method:: fit(utterances, labels)

      Train the logistic regression classifier.

      :param utterances: List of training utterances.
      :param labels: List of labels corresponding to the utterances.
      :raises ValueError: If the vector index mismatches the provided utterances.



   .. py:method:: predict(utterances)

      Predict probabilities for the given utterances.

      :param utterances: List of query utterances.
      :return: Array of predicted probabilities for each class.



   .. py:method:: clear_cache()

      Clear cached data in memory used by the embedder.



   .. py:method:: dump(path)

      Save the LinearScorer's metadata, classifier, and embedder to disk.

      :param path: Path to the directory where assets will be dumped.



   .. py:method:: load(path)

      Load the LinearScorer's metadata, classifier, and embedder from disk.

      :param path: Path to the directory containing the dumped assets.



.. py:class:: MLKnnScorer(k, embedder_name, db_dir = None, s = 1.0, ignore_first_neighbours = 0, device = 'cpu', batch_size = 32, max_length = None)

   Bases: :py:obj:`autointent.modules.scoring.ScoringModule`


   Multi-label k-nearest neighbors (ML-KNN) scorer.

   This module implements ML-KNN, a multi-label classifier that computes probabilities
   based on the k-nearest neighbors of a query instance.

   :ivar arrays_filename: Filename for saving probabilities to disk.
   :ivar metadata: Metadata about the scorer's configuration.
   :ivar prebuilt_index: Flag indicating if the vector index is prebuilt.
   :ivar name: Name of the scorer, defaults to "mlknn".


   .. py:attribute:: arrays_filename
      :type:  str
      :value: 'probs.npz'



   .. py:attribute:: metadata
      :type:  MLKnnScorerDumpMetadata


   .. py:attribute:: prebuilt_index
      :type:  bool
      :value: False



   .. py:attribute:: name
      :value: 'mlknn'



   .. py:attribute:: k


   .. py:attribute:: embedder_name


   .. py:attribute:: s


   .. py:attribute:: ignore_first_neighbours


   .. py:attribute:: device


   .. py:attribute:: batch_size


   .. py:attribute:: max_length


   .. py:property:: db_dir
      :type: str


      Get the database directory for the vector index.

      :return: Path to the database directory.



   .. py:method:: from_context(context, k, s = 1.0, ignore_first_neighbours = 0, embedder_name = None)
      :classmethod:


      Create an MLKnnScorer instance using a Context object.

      :param context: Context containing configurations and utilities.
      :param k: Number of nearest neighbors to consider.
      :param s: Smoothing parameter for probability calculations, defaults to 1.0.
      :param ignore_first_neighbours: Number of closest neighbors to ignore, defaults to 0.
      :param embedder_name: Name of the embedder, or None to use the best embedder.
      :return: Initialized MLKnnScorer instance.



   .. py:method:: get_embedder_name()

      Get the name of the embedder.

      :return: Embedder name.



   .. py:method:: fit(utterances, labels)

      Fit the scorer by training or loading the vector index and calculating probabilities.

      :param utterances: List of training utterances.
      :param labels: List of multi-label targets for each utterance.
      :raises TypeError: If the labels are not multi-label.
      :raises ValueError: If the vector index mismatches the provided utterances.



   .. py:method:: predict_labels(utterances, thresh = 0.5)

      Predict labels for the given utterances.

      :param utterances: List of query utterances.
      :param thresh: Threshold for binary classification, defaults to 0.5.
      :return: Predicted labels as a binary array.



   .. py:method:: predict(utterances)

      Predict probabilities for the given utterances.

      :param utterances: List of query utterances.
      :return: Array of predicted probabilities for each class.



   .. py:method:: predict_with_metadata(utterances)

      Predict probabilities along with metadata for the given utterances.

      :param utterances: List of query utterances.
      :return: Tuple of probabilities and metadata with neighbor information.



   .. py:method:: clear_cache()

      Clear cached data in memory used by the vector index.



   .. py:method:: dump(path)

      Save the MLKnnScorer's metadata and probabilities to disk.

      :param path: Path to the directory where assets will be dumped.



   .. py:method:: load(path)

      Load the MLKnnScorer's metadata and probabilities from disk.

      :param path: Path to the directory containing the dumped assets.



