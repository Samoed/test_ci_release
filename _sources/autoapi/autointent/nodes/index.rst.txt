autointent.nodes
================

.. py:module:: autointent.nodes


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/autointent/nodes/inference/index
   /autoapi/autointent/nodes/nodes_info/index
   /autoapi/autointent/nodes/optimization/index


Classes
-------

.. autoapisummary::

   autointent.nodes.InferenceNode
   autointent.nodes.NodeInfo
   autointent.nodes.PredictionNodeInfo
   autointent.nodes.RegExpNodeInfo
   autointent.nodes.RetrievalNodeInfo
   autointent.nodes.ScoringNodeInfo
   autointent.nodes.NodeOptimizer


Package Contents
----------------

.. py:class:: InferenceNode(module, node_type)

   Inference node class.


   .. py:attribute:: module


   .. py:attribute:: node_type


   .. py:method:: from_config(config)
      :classmethod:


      Initialize from config.

      :param config: Configuration for the node.



   .. py:method:: clear_cache()

      Clear cache.



.. py:class:: NodeInfo

   Base node info class.


   .. py:attribute:: metrics_available
      :type:  ClassVar[collections.abc.Mapping[str, autointent.metrics.METRIC_FN]]

      Available metrics for the node.



   .. py:attribute:: modules_available
      :type:  ClassVar[collections.abc.Mapping[str, type[autointent.modules.Module]]]

      Available modules for the node.



   .. py:attribute:: node_type
      :type:  autointent.custom_types.NodeType

      Node type.



.. py:class:: PredictionNodeInfo

   Bases: :py:obj:`autointent.nodes.nodes_info._base.NodeInfo`


   Prediction node info.


   .. py:attribute:: metrics_available
      :type:  ClassVar[collections.abc.Mapping[str, autointent.metrics.PredictionMetricFn]]

      Available metrics for the node.



   .. py:attribute:: modules_available
      :type:  ClassVar[dict[str, type[autointent.modules.Module]]]

      Available modules for the node.



   .. py:attribute:: node_type

      Node type.



.. py:class:: RegExpNodeInfo

   Bases: :py:obj:`autointent.nodes.nodes_info._base.NodeInfo`


   Regexp node info.


   .. py:attribute:: metrics_available
      :type:  ClassVar[collections.abc.Mapping[str, autointent.metrics.regexp.RegexpMetricFn]]

      Available metrics for the node.



   .. py:attribute:: modules_available
      :type:  ClassVar[collections.abc.Mapping[str, type[autointent.modules.Module]]]

      Available modules for the node.



   .. py:attribute:: node_type

      Node type.



.. py:class:: RetrievalNodeInfo

   Bases: :py:obj:`autointent.nodes.nodes_info._base.NodeInfo`


   Retrieval node info.


   .. py:attribute:: metrics_available
      :type:  ClassVar[collections.abc.Mapping[str, autointent.metrics.RetrievalMetricFn]]

      Available metrics for the node.



   .. py:attribute:: modules_available
      :type:  ClassVar[collections.abc.Mapping[str, type[autointent.modules.Module]]]

      Available modules for the node.



   .. py:attribute:: node_type

      Node type.



.. py:class:: ScoringNodeInfo

   Bases: :py:obj:`autointent.nodes.nodes_info._base.NodeInfo`


   Scoring node info.


   .. py:attribute:: metrics_available
      :type:  ClassVar[collections.abc.Mapping[str, autointent.metrics.ScoringMetricFn]]

      Available metrics for the node.



   .. py:attribute:: modules_available
      :type:  ClassVar[collections.abc.Mapping[str, type[autointent.modules.ScoringModule]]]

      Available modules for the node.



   .. py:attribute:: node_type

      Node type.



.. py:class:: NodeOptimizer(node_type, search_space, metric)

   Node optimizer class.


   .. py:attribute:: node_info


   .. py:attribute:: metric_name


   .. py:attribute:: modules_search_spaces


   .. py:method:: from_dict_config(config)
      :classmethod:


      Initialize from dictionary config.

      :param config: Config



   .. py:method:: fit(context)

      Fit the node optimizer.

      :param context: Context



   .. py:method:: get_module_dump_dir(dump_dir, module_type, j_combination)

      Get module dump directory.

      :param dump_dir: The base directory where the module dump directories will be created.
      :param module_type: The type of the module being optimized.
      :param j_combination: The index of the parameter combination being used.
      :return: The path to the module dump directory as a string.



   .. py:method:: module_fit(module, context)

      Fit the module.

      :param module: Module to fit
      :param context: Context to use



