autointent.context.vector_index_client
======================================

.. py:module:: autointent.context.vector_index_client


Classes
-------

.. autoapisummary::

   autointent.context.vector_index_client.VectorIndex
   autointent.context.vector_index_client.VectorIndexClient


Functions
---------

.. autoapisummary::

   autointent.context.vector_index_client.get_db_dir


Package Contents
----------------

.. py:function:: get_db_dir(db_dir = None)

   Get the directory for the vector database.

   :param db_dir: Directory for the vector database.
   :return: Path to the vector database directory.


.. py:class:: VectorIndex(model_name, device, embedder_batch_size = 32, embedder_max_length = None)

   A class for managing a vector index using FAISS and embedding models.

   This class allows adding, querying, and managing embeddings and their associated
   labels for efficient nearest neighbor search.


   .. py:attribute:: model_name


   .. py:attribute:: embedder


   .. py:attribute:: device


   .. py:attribute:: labels
      :type:  list[autointent.custom_types.LabelType]
      :value: []



   .. py:attribute:: texts
      :type:  list[str]
      :value: []



   .. py:attribute:: logger


   .. py:method:: add(texts, labels)

      Add texts and their corresponding labels to the index.

      :param texts: List of input texts.
      :param labels: List of labels corresponding to the texts.



   .. py:method:: is_empty()

      Check if the index is empty.

      :return: True if the index contains no embeddings, False otherwise.



   .. py:method:: delete()

      Delete the vector index and all associated data from disk and memory.



   .. py:method:: clear_ram()

      Clear the vector index from RAM.



   .. py:method:: get_all_embeddings()

      Retrieve all embeddings stored in the index.

      :return: Array of all embeddings.
      :raises ValueError: If the index has not been created yet.



   .. py:method:: get_all_labels()

      Retrieve all labels stored in the index.

      :return: List of all labels.



   .. py:method:: query(queries, k)

      Query the index to retrieve nearest neighbors.

      :param queries: List of text queries or embedding vectors.
      :param k: Number of nearest neighbors to return for each query.
      :return: A tuple containing:
               - `labels`: List of retrieved labels for each query.
               - `distances`: Corresponding distances for each neighbor.
               - `texts`: Corresponding texts for each neighbor.



   .. py:method:: dump(dir_path)

      Save the index and associated data to disk.

      :param dir_path: Directory path to save the data.



   .. py:method:: load(dir_path)

      Load the index and associated data from disk.

      :param dir_path: Directory path where the data is stored.



.. py:class:: VectorIndexClient(device, db_dir, embedder_batch_size = 32, embedder_max_length = None)

   Client interface for managing vector indexes.

   This class provides methods for creating, persisting, loading, and deleting
   vector indexes. Indexes are stored in a specified directory and associated
   with embedding models.


   .. py:attribute:: device


   .. py:attribute:: db_dir


   .. py:attribute:: embedder_batch_size


   .. py:attribute:: embedder_max_length


   .. py:method:: create_index(model_name, utterances = None, labels = None)

      Create a new vector index for the specified model.

      :param model_name: Name of the embedding model (Hugging Face repo, not a local path).
      :param utterances: Optional list of utterances to add to the index.
      :param labels: Optional list of labels corresponding to the utterances.
      :return: A `VectorIndex` instance.
      :raises ValueError: If only one of `utterances` or `labels` is provided.



   .. py:method:: dump(index)

      Persist the vector index to disk.

      :param index: The `VectorIndex` instance to save.



   .. py:method:: delete_index(model_name)

      Delete a vector index and its associated data.

      :param model_name: Name of the model.



   .. py:method:: get_index(model_name)

      Load a vector index for a given model.

      :param model_name: Name of the model.
      :return: The loaded `VectorIndex` instance.
      :raises NonExistingIndexError: If the index does not exist.



   .. py:method:: exists(model_name)

      Check if a vector index exists for a given model.

      :param model_name: Name of the model.
      :return: True if the index exists, False otherwise.



   .. py:method:: delete_db()

      Delete all vector indexes and their associated data from disk.



