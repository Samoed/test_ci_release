autointent.context.optimization_info
====================================

.. py:module:: autointent.context.optimization_info


Classes
-------

.. autoapisummary::

   autointent.context.optimization_info.Artifact
   autointent.context.optimization_info.PredictorArtifact
   autointent.context.optimization_info.RetrieverArtifact
   autointent.context.optimization_info.ScorerArtifact
   autointent.context.optimization_info.OptimizationInfo


Package Contents
----------------

.. py:class:: Artifact(/, **data)

   Bases: :py:obj:`pydantic.BaseModel`


   Base class for artifacts generated by pipeline nodes.


.. py:class:: PredictorArtifact(/, **data)

   Bases: :py:obj:`Artifact`


   Artifact containing outputs from the predictor node.

   Outputs from the best predictor, numpy array of shape (n_samples,) or
   (n_samples, n_classes) depending on classification mode (multi-class or multi-label)


   .. py:attribute:: model_config

      Configuration for the model, should be a dictionary conforming to [`ConfigDict`][pydantic.config.ConfigDict].



   .. py:attribute:: labels
      :type:  numpy.typing.NDArray[numpy.float64]


.. py:class:: RetrieverArtifact(/, **data)

   Bases: :py:obj:`Artifact`


   Artifact containing details from the retrieval node.

   Name of the embedding model chosen after retrieval optimization.


   .. py:attribute:: embedder_name
      :type:  str


.. py:class:: ScorerArtifact(/, **data)

   Bases: :py:obj:`Artifact`


   Artifact containing outputs from the scoring node.

   Outputs from the best scorer, numpy arrays of shape (n_samples, n_classes).


   .. py:attribute:: model_config

      Configuration for the model, should be a dictionary conforming to [`ConfigDict`][pydantic.config.ConfigDict].



   .. py:attribute:: test_scores
      :type:  numpy.typing.NDArray[numpy.float64] | None


   .. py:attribute:: oos_scores
      :type:  numpy.typing.NDArray[numpy.float64] | None


.. py:class:: OptimizationInfo

   Tracks optimization results, including trials, artifacts, and modules.

   This class provides methods for logging optimization results, retrieving
   the best-performing modules and artifacts, and generating configuration
   for inference nodes.


   .. py:attribute:: artifacts


   .. py:attribute:: trials


   .. py:attribute:: modules


   .. py:method:: log_module_optimization(node_type, module_type, module_params, metric_value, metric_name, artifact, module_dump_dir, module = None)

      Log optimization results for a module.

      :param node_type: Type of the node being optimized.
      :param module_type: Type of the module.
      :param module_params: Parameters of the module for the trial.
      :param metric_value: Metric value achieved by the module.
      :param metric_name: Name of the evaluation metric.
      :param artifact: Artifact generated by the module.
      :param module_dump_dir: Directory where the module is dumped.
      :param module: The module instance, if available.



   .. py:method:: get_best_embedder()

      Retrieve the name of the best embedder from the retriever node.

      :return: Name of the best embedder.



   .. py:method:: get_best_test_scores()

      Retrieve the test scores from the best scorer node.

      :return: Test scores as a numpy array.



   .. py:method:: get_best_oos_scores()

      Retrieve the out-of-scope scores from the best scorer node.

      :return: Out-of-scope scores as a numpy array.



   .. py:method:: dump_evaluation_results()

      Dump evaluation results for all nodes.

      :return: Dictionary containing metrics and configurations for all nodes.



   .. py:method:: get_inference_nodes_config()

      Generate configuration for inference nodes based on the best trials.

      :return: List of `InferenceNodeConfig` objects for inference nodes.



   .. py:method:: get_best_modules()

      Retrieve the best modules for all node types.

      :return: Dictionary of the best modules for each node type.



